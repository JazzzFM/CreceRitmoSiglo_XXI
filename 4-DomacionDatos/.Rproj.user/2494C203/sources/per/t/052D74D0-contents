---
title: 'Transformación: Introducción a dplyr'
output: learnr::tutorial
runtime: shiny_prerendered
tutorial:
  id: morant-clase-2
  version: 1
resource_files:
- renv.lock
---

```{r setup, include=FALSE}
library(learnr)
library(gradethis)
library(learnrhash)
library(ggplot2)
gradethis::gradethis_setup()
knitr::opts_chunk$set(exercise.checker = gradethis::grade_learnr)
```

```{r stormtrooper, fig.margin = TRUE, echo = FALSE, fig.width=3, out.width = "100%", fig.cap="Ilustración por Emilio Morones."}
knitr::include_graphics("images/transformation.png")
```

## Prerequisitos

```{r prerequisites, echo=TRUE}
library(nycflights13)
library(tidyverse)
# O bien library(dplyr)
```

Para explorar las funciones principales del paquete `dplyr` utilizaremos la base de datos `flights` 

```{r db_1, echo=TRUE}
flights
```

Existen diferentes tipos de variables:

* `int` números enteros.
* `dbl` números reales.
* `chr` texto.
* `dttm` fecha - hora.
* `lgl` lógico.
* `fctr` factor, variables categóricas.
* `date` fecha.


### Funciones básicas de `dplyr`

  * `filter()` elige observaciones por sus valores.
  * `arrange()` reordena los renglones.
  * `select()` selecciona variables.
  * `mutate()` genera nuevas variables, generalmente son funciones de variables existentes.
  * `summarise()` colapsa muchos valores para tener un resumen.

Estas funciones se pueden utilizar en conjunto con la función `group_by()`.

Argumentos:

1. `data.frame`.
2. Instrucciones que hacer con los datos.

Resultados:

Un nuevo `data.frame`.

## Filtrar renglones con filter()

```{r filter_1, echo=TRUE}
filter(flights, month == 1, day == 1)
```
Operadores comparativos: `>` (mayor a),`>=` (mayor o igual a),`<` (menor a),`<=` (menor o igual a),`!=` (diferente),`==` (igual)

Cuidados:
```{r operadores_1, echo=TRUE}
sqrt(2) ^ 2 == 2
1 / 49 * 49 == 1
```

Utilizar función near()
```{r near_1, echo=TRUE}
near(sqrt(2) ^ 2,  2)
near(1 / 49 * 49, 1)
```

### Operadores lógicos
![x es el círculo de la izquierda, y es el de la derecha y la zona sombreada es lo que representa la operación](images/operaciones.png)

```{r operaciones_1, echo=TRUE}
filter(flights, month == 11 | month == 12)
```

```{r operaciones_2, echo=TRUE}
filter(flights, month %in% c(11,12))
```

Algunas veces filtros complicados se pueden simplificar con la ley De Morgan:

* `!(x & y)` es lo mismo a `!x | !y`
* `!(x | y)` es lo mismo a `!x & !y`

Por ejemplo:
```{r operaciones_3, echo=TRUE}
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)
```

### Valores faltantes
Algo que podría hacer a `R` un tanto mañoso es el trato de los valores faltantes. Casi cualquier operación que involucre valores faltantes también será desconocido.

```{r na_1, echo=TRUE}
NA > 1
1 == NA
NA + 1
NA / 1
NA == NA
```

```{r na_2, echo=TRUE}
is.na(NA)
```

```{r na_3, echo=TRUE}
bd <-  tibble(x = c(1:3, NA))
filter(bd, x > 2)
filter(bd, x > 2 | is.na(x))
```

### Ejercicios

1. Encuentra todos los vuelos que:

1.1 Que tuvieron un retraso de llegada de 2 horas o más
```{r ejercicio1, exercise=TRUE}
filter(flights, ___)
```
<div id="ejercicio1-hint">
**Hint:** Usa la variable *arr_delay*
</div>
```{r ejercicio1-solution}
filter(flights, arr_delay >= 120)
```
```{r ejercicio1-check}
grade_this_code()
```

1.2 Volaron a Houston (IAH o HOU)
```{r ejercicio2, exercise=TRUE}
filter(flights, ___)
```
<div id="ejercicio2-hint">
**Hint:** Usa la variable *dest*    
</div>    
```{r ejercicio2-solution}
filter(flights, dest == "IAH" | dest == "HOU")
```
```{r ejercicio2-check}
grade_this_code()
```

1.3 Fueron operados por United, American, o Delta
```{r ejercicio3, exercise=TRUE}
filter(flights, ___)
```

<div id="ejercicio3-hint">
**Hint:** Usa la variable **carrier**
</div>

```{r ejercicio3-solution}
filter(flights, carrier %in% c("AA", "DL", "UA"))
```

```{r ejercicio3-check}
grade_this_code()
```

1.4 Salieron en Julio, Agosto y Septiembre
```{r ejercicio4, exercise=TRUE}
filter(flights, ___)
```

<div id="ejercicio4-hint">
**Hint:** Usa la variable **month**
</div>

```{r ejercicio4-solution}
filter(flights, month >= 7, month <= 9)
```

```{r ejercicio4-check}
grade_this_code()
```

1.5 LLegaron más de dos horas tarde pero no salieron tarde
```{r ejercicio5, exercise=TRUE}
filter(flights, ___)
```

<div id="ejercicio5-hint">
**Hint:** Usa la variable **arr_delay** y **dep_delay**
</div>

```{r ejercicio5-solution}
filter(flights, arr_delay > 120, dep_delay <= 0)
```

```{r ejercicio5-check}
grade_this_code()
```

1.6 Salieron al menos una hora tarde pero recuperaron 30 minutos de vuelo
```{r ejercicio6, exercise=TRUE}
filter(flights, ___)
```

<div id="ejercicio6-hint">
**Hint:** Usa la variable **dep_delay** y usa la diferencia entre **arr_delay** y esta. 
</div>

```{r ejercicio6-solution}
filter(flights, dep_delay >= 60, dep_delay - arr_delay > 30)
```

```{r ejercicio6-check}
grade_this_code()
```

1.7 Salieron de la media noche a las 6am (incluyéndo)
```{r ejercicio7, exercise=TRUE}
filter(flights, ___)
```

<div id="ejercicio7-hint">
**Hint:** Usa la variable **dep_delay** y usa la diferencia entre **arr_delay** y esta. 
</div>

```{r ejercicio7-solution}
filter(flights, dep_time <= 600 | dep_time == 2400)
```

```{r ejercicio7-check}
grade_this_code()
```

2 Otra función muy útil de `dplyr` es `between()`.`

```{r quiz1, echo = FALSE}
quiz(caption = "Responde",
  question_text(
  "¿Qué hace? ¿Podrías utilizarlo para simplificar el código para responder las preguntas anteriores?",
  answer(NULL, correct = TRUE),
  incorrect = "Lo estaremos revisando! Gracias!",
  try_again_button = "Modifica tu respuesta",
  allow_retry = TRUE
)
)
```

3 ¿Cuántos vuelos no tienen información en la variable `dep_time`?
```{r ejercicio8, exercise=TRUE}
filter(flights, ___)
```

<div id="ejercicio8-hint">
**Hint:** Usa la función `is.na()` en la variable necesaria. 
</div>

```{r ejercicio8-solution}
filter(flights, is.na(dep_time))
```

```{r ejercicio8-check}
grade_this_code()
```

```{r quiz2, echo = FALSE}
quiz(caption = "Responde",
  question_text(
  "¿Qué otras variables faltan? ¿Qué podrían representar estos renglones?",
  answer(NULL, correct = TRUE),
  incorrect = "Lo estaremos revisando! Gracias!",
  try_again_button = "Modifica tu respuesta",
  allow_retry = TRUE
)
)
```

4
```{r quiz3, echo = FALSE}
quiz(caption = "Responde",
  question_text(
  "¿Por qué `NA ^ 0`, `NA | TRUE`, `FALSE & NA` no son valores faltantes? ¿Podrías descubrir una regla general? (NA * 0 tiene truco)",
  answer(NULL, correct = TRUE),
  incorrect = "Lo estaremos revisando! Gracias!",
  try_again_button = "Modifica tu respuesta",
  allow_retry = TRUE
)
)
```


## Seleccionar columnas con `select()`

Es común que manejemos datos con cientos de variables. Seleccionar las variables que realmente interesan es la tarea de select

```{r select1, echo=TRUE}
select(flights, year, month, day)
select(flights, year:day)
select(flights, -(year:day))
```

Hay más funciones que se pueden utilizar dentro de `select()` como:

* `starts_with()` variables que empiezan con cierto patrón
* `ends_with()` variables que terminan con cierto patrón
* `contains()` variables que contienen cierto patrón
* `matches()` variables que coinciden con expresiones regulares (más adelante profundizaré)
* `num_range("x", 1:3)` que coincida con `x1`, `x2` y `x3`

Revisa `?select` para mayor detalle

También es posible renombrar variables al seleccionarlas. Esto es poco útil ya el resultado final contendría sólo las variables seleccionadas. Si el objetivo es renombrar variables utiliza `rename()`

```{r select2, echo=TRUE}
select(flights, tail_num = tailnum)
rename(flights, tail_num = tailnum)
```

Podrías utilizar la función `everything()` para cambiar el orden de las variables

```{r select3, echo=TRUE}
select(flights, time_hour, air_time, everything())
```

Otra forma de cambiar el orden de las columnas es con `relocate()` 
 
```{r select4, echo=TRUE}
relocate(flights, time_hour, dep_time, .before = year)
```

Revisa `?relocate` para mayor detalle.
  
### Ejercicios

1 ¿Cuántas formas se te ocurren para seleccionar las variables `dep_time`, `dep_delay`, `arr_time` y `arr_delay` de `flights`?

```{r ejercicio13, exercise=TRUE}
arrange(flights, ___)
```

2 ¿Qué pasa si incluyes el nombre de una variable múltiples veces en un sólo `select()`?

```{r ejercicio14, exercise=TRUE}
select(flights, year, month, day, year, year)
```

3 ¿Qué hace la función `any_of()`? ¿Cómo podría ayudar al tener el siguiente vector?

```{r, ejercicio15, exercise=TRUE}
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, any_of(vars))
```

4 ¿Te sorpende el resultado del siguiente código?

```{r}
select(flights, contains("TIME"))
```

```{r quiz4, echo = FALSE}
quiz(caption = "Responde",
  question_text(
  "¿Cuál es el tratamiento de las funciones adicionales con las mayúsculas por defecto? ¿Cómo podrías cambiarlo?",
  answer(NULL, correct = TRUE),
  incorrect = "Lo estaremos revisando! Gracias!",
  try_again_button = "Modifica tu respuesta",
  allow_retry = TRUE
)
)
```

## Agrega nuevas variables con `mutate()`

Cuando creamos nuevas columnas con `mutate()` siempre se agregarán al final de la base de datos. Por esto es buena idea seleccionar primero las columnas más relevantes para poder visualizar los resultados del `mutate()`

```{r mutate1, echo=TRUE}
flights_sml <- select(flights, 
  year:day, 
  ends_with("delay"), 
  distance, 
  air_time
)

mutate(flights_sml,
  gain = dep_delay - arr_delay,
  speed = distance / air_time * 60
)
```

Nota que puedes hacer referencia a las columnas que acabas de crear

```{r mutate2, echo=TRUE}
mutate(flights_sml,
  gain = dep_delay - arr_delay,
  hours = air_time / 60,
  gain_per_hour = gain / hours
)
```

Si sólo quieres mantener las columnas que acabas de transformar utiliza `transmute()`

```{r transmutate1, echo=TRUE}
transmute(flights,
  gain = dep_delay - arr_delay,
  hours = air_time / 60,
  gain_per_hour = gain / hours
)
```

### Funciones útiles para crear variables

La propiedad fundamental de las funciones es que debe estar vecotrizadas, es decir, tomar valores de un vector como entrada y como salida debe ser otro vector del mismo tamaño. Hay una gama muy grande de funciones que pueden ser utilizadas pero entre las más comunes son las siguientes:

**operaciones aritméticas**: `+`, `-`, `*`, `/`, `^` . También son útiles al usarlas en conjunto con funciones agregadoras por ejemplo `x / sum(x)` para calcular la proporción del total, `y - mean(y)` calcula la diferencia de cada valor de la variable `y` con respecto a la media de la variable `y`

**Operaciones modulares**: `%/%` (el número entero al hacer una división) y `%%` el residuo.

```{r transmutate2, echo=TRUE}
transmute(flights,
  dep_time,
  hour = dep_time %/% 100,
  minute = dep_time %% 100
)
```

**Logaritmos**: `log()`, `log2()`, `log10()`. Son útiles para tratar con datos que tienen magnitudes muy diferentes. Convierten una relación multiplicativa en aditiva (esto lo clarificaremos en la sección de modelaje). `log2()` es recomendable porque es fácil de interpretar: una diferencia de 1 en la escla logarítmica corresponde al doble en la escala original, una diferencia de -1 corresponde a la mitad en la escala original.

**Compensaciones** : `lead()` y `lag()` (ej. `x - lag(x)` diferencias entre valores) (ej2. `x != lag(x)` enconotrar los valores cuando cambian). 

```{r ejercicio16, echo=TRUE}
(x <- 1:10)
lag(x)
lead(x)
```

**Operaciones cumulativas**: `cumsum()`, `cumprod()`, `cummin()`, `cummax()`, `cummean()`

```{r ejercicio17, echo=TRUE}
cumsum(x)
cummean(x)
```

**Comparaciones lógicas**: `<`, `<=`, `>`, `!=`, `==`

**Ranking**: investiga qué hacen las siguientes funciones `min_rank()`, `dense_rank()`, `percent_rank()`, `cume_dist()`, `ntile()`

```{r ejercicio18, echo=TRUE}
y <- c(1, 2, 2, NA, 3, 4)
min_rank(y)
min_rank(desc(y))
row_number(y)
dense_rank(y)
percent_rank(y)
cume_dist(y)
```

### Ejercicios

1 `dep_time` y `sched_dep_time` son fáciles de ver pero difíciles de computar porque no son números continuos. Conviértelos a una representación más amigable de minutos desde la media noche.

```{r ejercicio19, exercise=TRUE}
mutate(flights,
  dep_time_mins = (dep_time %/% ___ * ___ + dep_time %% ___) %% ___,
  sched_dep_time_mins = (sched_dep_time %/% ___ * ___ +
  ched_dep_time %% ___) %% ___
)
```

<div id="ejercicio19-hint">
**Hint:** Usa la función necesaria junto con la definición de la variable para convertirlo. 
</div>

```{r ejercicio19-solution}
mutate(flights,
  dep_time_mins = (dep_time %/% 100 * 60 + dep_time %% 100) %% 1440,
  sched_dep_time_mins = (sched_dep_time %/% 100 * 60 +
  ched_dep_time %% 100) %% 1440
)
```

```{r ejercicio19-check}
grade_this_code()
```

2 Compara `air_time` con `arr_time - dep_time`. 
```{r ejercicio20, exercise=TRUE}
mutate(flights,
    dep_time = (dep_time %/% 100 * 60 + dep_time %% 100) %% 1440,
    arr_time = (arr_time %/% 100 * 60 + arr_time %% 100) %% 1440,
    air_time_diff = air_time - arr_time + dep_time
  )
```

```{r quiz5, echo = FALSE}
quiz(caption = "Responde",
  question_text(
  "¿Qué esperas ver? ¿Qué ves en realidad? ¿Qué debes cambiar?",
  answer(NULL, correct = TRUE),
  incorrect = "Lo estaremos revisando! Gracias!",
  try_again_button = "Modifica tu respuesta",
  allow_retry = TRUE
)
)
```

3 Compara `dep_time`, `sched_dep_time` y `dep_delay`. ¿Cómo esperas que esos 3 números se relacionen?
```{r ejercicio21, exercise=TRUE}
mutate(flights,
    dep_time_min = (___ %/% 100 * 60 + ___ %% 100) %% 1440,
    sched_dep_time_min = (___ %/% 100 * 60 +
      sched_dep_time %% 100) %% 1440,
    dep_delay_diff = ___ - ___ + ___
  )
```

<div id="ejercicio21-hint">
**Hint:** Usa la función necesaria junto con la definición de la variable para convertirla. 
</div>

```{r ejercicio21-solution}
mutate(flights,
    dep_time_min = (dep_time %/% 100 * 60 + dep_time %% 100) %% 1440,
    sched_dep_time_min = (sched_dep_time %/% 100 * 60 +
      sched_dep_time %% 100) %% 1440,
    dep_delay_diff = dep_delay - dep_time_min + sched_dep_time_min
  )
```

```{r ejercicio21-check}
grade_this_code()
```

4 Encuentra los vuelos más retrasados utilizando alguna función de ranking. ¿Cómo quieres manejar los empates? Lee cuidadosamente la documentación `min_rank()`
```{r ejercicio22, exercise=TRUE}
mutate(flights,  
        dep_delay_min_rank = min_rank(desc(____)),
        dep_delay_row_number = row_number(desc(___)),
        dep_delay_dense_rank = dense_rank(desc(___))
 )
```

<div id="ejercicio22-hint">
**Hint:** Usa la función `min_rank()` junto con la definición de la variable para convertirla. 
</div>

```{r ejercicio22-solution}
mutate(flights,
        dep_delay_min_rank = min_rank(desc(dep_delay)),
        dep_delay_row_number = row_number(desc(dep_delay)),
        dep_delay_dense_rank = dense_rank(desc(dep_delay))
)
```

```{r ejercicio22-check}
grade_this_code()
```

5 ¿Cuál es el resultado de `1:3 + 1:10`.
```{r ejercicio23, exercise=TRUE}
1:3 + 1:10
```

```{r quiz6, echo = FALSE}
quiz(caption = "Responde",
  question_text(
  "¿Por qué?",
  answer(NULL, correct = TRUE),
  incorrect = "Lo estaremos revisando! Gracias!",
  try_again_button = "Modifica tu respuesta",
  allow_retry = TRUE
)
)
```

6 
```{r quiz7, echo = FALSE}
quiz(caption = "Responde",
  question_text(
  "¿Qué funciones trigonométricas provee R?",
  answer(NULL, correct = TRUE),
  incorrect = "Lo estaremos revisando! Gracias!",
  try_again_button = "Modifica tu respuesta",
  allow_retry = TRUE
)
)
```

## Envía tus respuestas

### Material de referencia
Hadley Wickham y Garrett Grolemund, "R for Data Science: Import, Tidy, Transform, Visualize, and Model Data" O'REILLY [`R for Data Science`](https://r4ds.had.co.nz/)


```{r context="server"}
learnrhash::encoder_logic()
```

```{r encode, echo=FALSE}
learnrhash::encoder_ui(
  ui_before = shiny::div(
    "Si ha completado este tutorial y está satisfecho con todos sus",
     "soluciones, haga clic en el botón de abajo para generar su hash y",
     "envíalo usando el siguiente formulario:",
    shiny::tags$br()
  )
)
```

Enviar hash al siguiente link -> [__Aqui__](https://docs.google.com/spreadsheets/d/1eXNEGrumywfCt4xop5ygcJGxbXI5kfNdiHOztiGspoA/edit?usp=sharing)

```{r stormtrooper2, echo = FALSE}
knitr::include_graphics("images/morant.jpg")
```