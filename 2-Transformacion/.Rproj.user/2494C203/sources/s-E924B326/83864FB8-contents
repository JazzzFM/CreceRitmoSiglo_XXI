
tema_probGanar <- function(){
  fuente <- "Georgia"   
  # Tema base
  theme_minimal() + 
    theme(
      # Ratio
      aspect.ratio = 1,
      # Fondo
      # Texto
      plot.title = element_text(family = "Avenir Next",hjust = .5),
      # Retícula
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      # Ejes
      #axis.text.y = element_blank(),
      axis.text.x = element_text(size = 40/.pt),
      axis.title = element_blank()
    )
}

probGanarOld <- function(bd, candidato, nCand){
  
  pCand <- bd %>% 
    filter(candidato == {{candidato}}) %>% 
    pull("prob") 
  
  c <- bd %>% 
    filter(candidato == {{candidato}})
  
  bd <- bd %>% filter(candidato != {{candidato}}) %>% head(4)
  bd <- union(c, bd)
  
  # browser()
  g <- ggplot(bd) +
    # Marcas
    geom_rect(aes(xmin=0, xmax=nCand+1, ymin=0, ymax=25), alpha = 0.05, fill = "#C5C3C4")+
    geom_rect(aes(xmin=0, xmax=nCand+1, ymin=25, ymax=50), alpha = 0.10, fill = "#C5C3C4")+
    geom_rect(aes(xmin=0, xmax=nCand+1, ymin=50, ymax=75), alpha = 0.15, fill = "#C5C3C4")+
    geom_rect(aes(xmin=0, xmax=nCand+1, ymin=75, ymax=100), alpha = 0.20, fill = "#C5C3C4")+
    # Indicadores
    geom_rect(aes(xmin=rw, xmax=rw+.8, ymin=0, ymax=prob, fill = candidato, color = color),
              size=.3,color="white") +
    coord_polar(theta = "y")+
    geom_text(aes(x=-nCand, y=0, label=scales::percent(pCand/100)), size=8) +
    scale_fill_manual(values = c("INDEPENDIENTE 1" = "#925AAD",
                                 "MC" = "#ED6B40",
                                 "MORENA" = "#751438",
                                 "PAN"  = "#17418A",
                                 "PES" = "#54218A",
                                 "PRD" = "#FAB855",
                                 "PRI" = "#EB0E0E",
                                 "PT" = "#D63131",
                                 "INDEPENDIENTE 2" ="#2F9C37"))+
    labs(title = "Probabilidad de triunfo")+
    xlim(c(-nCand, nCand+1))+
    ylim(c(0,100))+
    tema_probGanar() +
    theme(
      text = element_text(family = "Avenir Next", size = 20),
      plot.title = element_text(size = 22,
                                colour =  "#13384D",
                                hjust = 0, face="bold"),
      axis.text.y = element_blank(),
      axis.line.x = element_blank(),
      panel.grid.major.y = element_blank(),
      legend.title = element_blank(),
      panel.grid = element_blank()
    )
  return(g)
}

hPollofPolls <- function(DB, puntos, hoy, eleccion) {
  # Funciones para volver al español
  hcoptslang <- getOption("highcharter.lang")
  hcoptslang$weekdays<- c("Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado")
  hcoptslang$shortMonths <- c("Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic")
  hcoptslang$months <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
  hcoptslang$thousandsSep <- c(",")
  options(highcharter.lang = hcoptslang)
  
  # Gráfica
  candidatos <- DB %>%  count(candidato) %>%  nrow()
  Graph <- highchart() %>%
    hc_chart(style = list(fontColor = "#1C313D", fontFamily= "Avenir Next"), zoomType = "x",
             events = list(load = JS(vSeries(grupos = candidatos)))) %>%
    hc_add_series(data = hoy,showInLegend = F,hcaes(x= x, y = y), type = "column", color ="#8BA4B0") %>% 
    hc_add_series(data = eleccion,showInLegend = F, hcaes(x= x, y = y), type = "column", color ="#BF374E") %>% 
    hc_add_series(DB, "arearange", 
                  hcaes(x = fecha,  low =ic_025, high = ic_975,
                        group = candidato),
                  enableMouseTracking = T, fillOpacity = 0.15) %>% 
    hc_add_series(DB , "line",
                  hcaes(x = fecha, y = media, group = candidato, grouping = FALSE)) %>% 
    hc_add_series(puntos, hcaes(x = fecha, y = as.numeric(resultado), group = partido), type = "scatter") %>%
    hc_yAxis(tickAmount = 4, min =0,
             title = list(text = "Estimación",
                          style = list( fontSize = "16px", color = "#41657A")),
             labels = list(format = "{value}%") ,
             style = list(fontSize = "18px",color = "#13384D")) %>%
    hc_xAxis(crosshair = T, type = "datetime",
             showLastLabel = F,
             tickLength =0,
             # tickInterval= 1000 * 60 * 60 * 24 * 365,
             labels = list(format = '{value:%B}', step = 2, style = list(fontSize = "18px",color = "#13384D")),
             title = list(text = "Fecha", style = list( fontSize = "16px", color = "#41657A"))) %>%
    hc_plotOptions(arearange = list(marker = list(radius = 0),lineWidth = 0, tooltip = list(enabled = F, pointFormat = '', headerFormat = '')),
                   column = list(pointWidth = "1", legend = list(enabled = F),opacity =.8,
                                 dataLabels = list(enabled = T, format = "{point.tt}"),
                                 tooltip = list(enabled = F, pointFormat = "", headerFormat = "")),
                   line = list(marker = list(radius = 0)),
                   scatter = list(marker = list(symbol = "circle", radius = 2) ,
                                  tooltip = list(pointFormat = '{point.casaEncuestadora} <br>{point.partido}: {point.resultado}% <br><span style="font-size: 12px">Levantamiento:<br> <span style="font-size: 12px">{point.fechaInicio} - {point.fechaFin} </span><br/>', headerFormat = ''))) %>%
    hc_tooltip(sort = T,
               shared = T,
               borderWidth= 0,
               split = T,
               pointFormat = "<br> <b>{series.name}:</b> {point.mediatt}% <span style='font-size: 10px'> [{point.ic_025tt}% - {point.ic_975tt}%]</span>",
               headerFormat = '<span style="font-size: 15px">{point.key}</span><br/>',
               style = list(fontSize = "16px", color = "#41657A"),
               useHTML = F) %>%
    hc_title(text = "<b>Intención de voto con intervalos</b>",
             align = "left", style = list(fontSize = "22px", color = "#13384D")) %>% 
    # hc_colors(colors = c("#720026", "#035BAD", "#D10A0A","black","green")) 
    hc_colors(DB %>% group_by(candidato, color) %>%  summarise() %>%  arrange(candidato) %>%  pull(color))
  
  return(Graph)
}

intVotoBarras <- function(DB){
  etiquetas <- DB %>% filter(votacion > 0.10*max(votacion))
  etiquetasChicas <- DB %>% filter(votacion <= 0.10*max(votacion))
  
  Graph <-ggplot(DB, aes(x = 0, y = y, xend = votacion, yend = y, fill = color, colour = color))+
    geom_segment(lineend = "round", linejoin = "round", size = 9.5, 
                 arrow = arrow(length = unit(.0001, "inches"))
    )  +
    annotate("text", hjust = 1, label = etiquetas$label, x = etiquetas$votacion, y = etiquetas$y, size = 6, colour = "white") +
    annotate("text", hjust = -0.5, label = etiquetasChicas$label, x = etiquetasChicas$votacion, y = etiquetasChicas$y, size = 6, colour = "#8b878d") +
    scale_color_identity() + theme_minimal() +
    labs(title = " Intención de voto puntual", caption = "", x = "", y = "candidatos") +
    annotate("text", label = DB$candidato, vjust = 0, hjust = 0, x = 0, y = DB$y_p, size = 5, colour = "#8b878d") +
    theme(
      axis.ticks.y=element_blank(), 
      axis.title.y = element_blank(),
      axis.title.x = element_text(color = "#8b878d"),
      text = element_text(family = "Avenir Next", size = 20),
      plot.title = element_text(size = 22,
                                colour =  "#13384D",
                                hjust = 0, face = "bold"),
      axis.text.y = element_blank(),
      axis.text.x = element_text(family = "Avenir Next", size = 15),
      axis.line.x = element_blank(),
      panel.grid.major.y = element_blank(),
      legend.title = element_blank(),
      legend.position = "none",
      panel.grid.major.x = element_blank(),
      panel.grid = element_blank()
    )
  
  return(Graph)
}

ggClaridadObjetivos <- function(DB){
# browser()
  
  DB <- DB %>% 
    count(nivelClaridad, casaEncuestadora )  %>% 
    group_by(casaEncuestadora) %>%  mutate(total = sum(n)) %>%  
    filter(nivelClaridad != "No hay") %>% 
    mutate(nivelClaridad = factor(nivelClaridad,
                                       levels = c("Bajo", "Intermedio", "Alta"))) 
  DB <- DB %>%  ungroup() %>% 
  arrange(nivelClaridad) %>%  mutate(orden = 1:nrow(DB))


  Graph <- DB %>% 
    ggplot(aes(fill = fct_reorder(nivelClaridad, orden), y = n, x= fct_reorder(casaEncuestadora, total)))+
    geom_bar(stat = "identity", alpha = .9, width = .5) + coord_flip()+
    theme_minimal() +
    labs(title = "Nivel de claridad \nen los objetivos", caption = "", x = "", y = "") +
      scale_fill_manual(values = c("Alta" = "#658C1D", 
                                    "Intermedio" ="#DB791D",
                                    "Bajo"= "#990B0B",
                                    "No hay"= "#999EA8"))+
    scale_y_continuous(breaks = scales::pretty_breaks(n = 1),
                       labels = scales::number_format(accuracy = 1))+
    theme(
      text = element_text(family = "Avenir Next", size = 15),
      plot.title = element_text(size = 20,
                                colour =  "#751438",
                                hjust = 0),
      axis.text.x = element_text( family = "Avenir Next", size = 12),
      axis.line.x = element_blank(),
      panel.grid.major.y = element_blank(),
      legend.title = element_blank(),
      legend.position = "bottom",
      legend.text = element_text(size = 10),
      panel.grid.major.x = element_blank(),
      panel.grid = element_blank()
    )

  
  return(Graph)
}

ggOperacionalizacion <- function(DB){
  # browser()
  DB <- DB %>% 
    count(operacionalizacion, casaEncuestadora )  %>% 
    group_by(casaEncuestadora) %>%  mutate(total = sum(n))  %>% 
    mutate(operacionalizacion = factor(operacionalizacion,
                                  levels = c("No", "Sí, parcialmente", "Sí, completos" ))) 
  DB <- DB %>%  ungroup() %>% 
    arrange(operacionalizacion) %>%  mutate(orden = 1:nrow(DB))
  
  
  Graph <- DB %>% 
    ggplot(aes(fill =fct_reorder(operacionalizacion, orden), y = n, x= fct_reorder(casaEncuestadora, total)))+
    geom_bar(stat = "identity", alpha = .9, width = .5) + coord_flip()+
    theme_minimal() +
    labs(title = "Operacionalización \nde objetivos", caption = "", x = "", y = "") +
    scale_fill_manual(values = c("Sí, completos" = "#658C1D", "Sí, parcialmente" ="#DB791D","No"= "#990B0B"))+
    labs(title = "Operacionalización \nde objetivos", subtitle = "", caption = "", x = "", y = "") +
    scale_y_continuous(breaks = scales::pretty_breaks(n = 1),
                       labels = scales::number_format(accuracy = 1))+
    # annotate("text", label = barras$opera, vjust = 0, hjust = 0, x = 0, y = barras$y + 0.3, size = 5, colour = "#8b878d") +
    theme(
      text = element_text(family = "Avenir Next", size = 15),
      plot.title = element_text(size = 20,
                                colour =  "#751438",
                                hjust = 0),
      axis.text.x = element_text( family = "Avenir Next", size = 12),
      axis.line.x = element_blank(),
      panel.grid.major.y = element_blank(),
      legend.title = element_blank(),
      legend.position = "bottom",
      legend.text = element_text(size = 10),
      panel.grid.major.x = element_blank(),
      panel.grid = element_blank()
    )
  
  
  return(Graph)
}

obsEncuestadora <- function(bloque, cuestionario, enc){


aux <- cuestionario %>% 
  left_join(bloque, by = "idCuestionario") %>% 
  left_join(enc, by = "idFormGeneral" ) %>% 
  # left_join(fecha, by = "idFormGeneral") %>% 
  gather(obs, num,c(numDeseabilidadSocial, numSupuestosImplicitos,numDobleBarril,
                    numNoMutuamenteExcluyentes, numSinBalanceRedaccion,
                    numRespuestaSinEquilibrio, numDiezOpciones,numCategoriaNeutral, 
                    numDiezOpciones)) 

tt <- aux %>%   
  group_by(casaEncuestadora, obs) %>%  summarise(n = sum(num)) %>%  
  arrange(desc(n)) %>% 
  mutate(obs = gsub(obs,pattern =  "num",fixed = T, replacement = ""),
         tt = paste0(obs,": " ,n)) %>%  arrange(desc(n)) %>% filter(!n==0) %>% 
  group_by(casaEncuestadora) %>%  summarise(tt = paste(tt, collapse = "<br>"))

pal <-colorRampPalette(c("#990B0B","#BA4214", "#E3CC59" , "#87A356"))
paleta <-pal(aux %>%  count(casaEncuestadora) %>%  nrow()) 

aux %>%   
  group_by(casaEncuestadora) %>%  summarise(n = sum(num)) %>%  
  arrange(desc(n)) %>% 
  left_join(tt) %>%  mutate(tt = case_when(is.na(tt)~"", T~tt)) %>% 
  hchart(hcaes(x = casaEncuestadora, y = n), type = "bar") %>% 
  hc_plotOptions(bar = list(borderRadius = 0, colorByPoint = T,
                            dataLabels = list(enabled = T))) %>% 
  hc_xAxis(title = list(enabled = F), lineWidth =0,
           labels = list(style = list(fontSize = "14px"))) %>% 
  hc_yAxis(title = list(enabled = F), tickAmount = 4, gridLineWidth =0) %>% 
  hc_tooltip(pointFormat = "{point.tt}",
             headerFormat = '<span style="font-size: 15px"><b>{point.key}</span><br/>',
             outside = T,
             borderWidth =0,
             shadow = F,
             shape = "square",
             style = list(fontSize = "18")) %>% 
  hc_title(text = "Errores por casa encuestadora",
           align = "left",
           style = list(fontSize = "20px", color = "#751438")) %>% 
  hc_chart(style = list(fontFamily = "Avenir Next"), backgroundColor = "#FFFFFF") %>% 
  hc_colors(paleta)

}
